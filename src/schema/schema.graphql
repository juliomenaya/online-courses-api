type Query {
    "Retrieve all Students"
    students: [Student!]!,
    "Student detail by id"
    student(id: ID!): Student!,
    "Retrieve all available courses"
    courses: [Course!]!,
    "Course detail, will return null if an unexistence course id is provided"
    course(id: ID!): Course
}

type Mutation {
    newCourse(course: CourseInput!): Course!
    updateCourse(course: CourseInput!): Course!
    deleteCourse(id: ID!): Course!
}

input CourseInput {
    id: ID,
    title: String!,
    description: String!,
    clases: Int!,
    time: Float!,
    logo: String!,
    level: Level=ALL,
    path: String!,
    teacher: String!
}

type Student {
    id: ID!,
    name: String!,
    email: String!,
    website: String,
    courses: [Course!]!
}

type Course {
    id: ID!,
    title: String!,
    description: String!,
    clases: Int!,
    time: Float!,
    logo: String!,
    level: Level!,
    path: String!,
    teacher: String!,
    students: [Student]
    reviews: [Review!]!
}

type Review {
    id: ID!,
    name: String!,
    points: Float!,
    comment: String
}

enum Level {
    ALL,
    MEDIUM
}

